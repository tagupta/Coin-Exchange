{"version":3,"sources":["components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/Header/logo.svg","components/Header/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["Section","styled","section","Span","span","AccountBalance","amount","showBalance","handleDisplay","buttonText","content","onClick","TableData","td","Coin","id","name","ticker","price","balance","refresh","action","method","event","preventDefault","CoinTable","table","Th","th","CoinList","coinData","map","key","AppHeader","header","H1","h1","App_logo_spin","keyframes","Img","img","Header","src","logo","className","alt","AppDiv","div","formatPrice","parseFloat","Number","toFixed","App","useState","setShowBalance","setCoinData","componentDidMount","a","axios","get","resp","coinIDs","data","slice","coin","promises","Promise","all","finalCoinData","response","symbol","quotes","USD","useEffect","length","handleRefresh","clickedId","newPrice","newCoinData","value","newValue","oldValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1a61b3b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst Section = styled.section`\r\n    margin: 40px auto 20px auto;\r\n    font-size: 1.3rem;\r\n    color: #03f0fc;\r\n    background-color: black;\r\n    padding: 10px;\r\n    border: 1px solid #c3c3c3;\r\n    width: fit-content;\r\n    line-height: 0.75em;\r\n`;\r\n\r\nconst Span = styled.span`\r\n     margin-right: 10px;\r\n`;\r\n\r\nconst AccountBalance  = ({amount,showBalance,handleDisplay}) =>{\r\n    const buttonText = showBalance ? 'Hide Balance':'Show Balance';\r\n    let content = \"\";\r\n    if(showBalance){\r\n        content = <Span>Account Balance: ${amount}</Span>\r\n    }\r\n    return (\r\n        <Section >\r\n            {content}\r\n            <button onClick = {handleDisplay}>{buttonText}</button>\r\n        </Section>\r\n    );\r\n}\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired\r\n};\r\n\r\nexport default AccountBalance;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\n\r\nconst TableData = styled.td`\r\n    border:2px solid #cccccc;\r\n    width: 25vh;\r\n`;\r\n\r\n const Coin = ({id,name,ticker,price,balance,refresh,showBalance}) => {\r\n   \r\n   const handleClick = (event) => {\r\n       event.preventDefault();\r\n       refresh(id);\r\n   } \r\n\r\n    \r\n        return (\r\n            <tr >\r\n                <TableData>{name}</TableData>\r\n                <TableData>{ticker}</TableData>\r\n                <TableData>${price}</TableData>\r\n                {showBalance ? <TableData>{balance}</TableData> : null}\r\n                <TableData>\r\n                <form action=\"#\" method=\"POST\">\r\n                    <button onClick={handleClick}>Refresh</button>\r\n                </form>\r\n                </TableData>\r\n            </tr>\r\n        )\r\n    \r\n}\r\n\r\nCoin.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired\r\n};\r\nexport default Coin;","import React from 'react';\r\nimport Coin from '../Coin/Coin';\r\nimport styled from 'styled-components';\r\n\r\nconst CoinTable = styled.table`\r\n  margin: 50px auto 50px auto;\r\n  display: inline-block;\r\n  border: 1px solid blanchedalmond;\r\n  border-collapse: collapse;\r\n`;\r\n\r\nconst Th = styled.th`\r\nborder: 1px solid blanchedalmond;\r\n`;\r\n\r\nconst CoinList  = ({coinData,refresh,showBalance}) =>{\r\n  \r\n        return (\r\n            <CoinTable >\r\n                <thead>\r\n                    <tr>\r\n                    <Th>Ticker</Th>\r\n                    <Th>Name</Th>\r\n                    <Th>Price</Th>\r\n                    {showBalance ? <Th>Balance</Th> : null}\r\n                    <Th>Action</Th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {coinData.map( ({key,name,ticker,price,balance}) => \r\n                    <Coin \r\n                       key = {key} \r\n                       id = {key}\r\n                       name = {name} \r\n                       ticker = {ticker} \r\n                       price = {price} \r\n                       balance = {balance}\r\n                       refresh = {refresh}\r\n                       showBalance = {showBalance}\r\n                    />\r\n                    )\r\n                    }\r\n                </tbody>\r\n        </CoinTable>\r\n    )\r\n}\r\nexport default CoinList;\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport styled, {keyframes} from 'styled-components';\r\n\r\nconst AppHeader = styled.header`\r\n  background-color: #000000;\r\n  min-height: 25vh;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n    font-size: 36px;\r\n`;\r\n\r\nconst App_logo_spin = keyframes`\r\n    from {\r\n        transform: rotate(0deg);\r\n    }\r\n    to {\r\n        transform: rotate(360deg);\r\n    }\r\n`;\r\n  \r\nconst Img = styled.img`\r\n    height: 20vmin;\r\n    pointer-events: none;\r\n    @media (prefers-reduced-motion: no-preference) {\r\n        animation: ${App_logo_spin} infinite 20s linear;\r\n      \r\n    }\r\n`;\r\n\r\nconst Header = () => {\r\n        return (\r\n            <AppHeader>\r\n                <Img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <H1>\r\n                   Coin Exchange\r\n                </H1>\r\n            </AppHeader>\r\n        );\r\n}\r\nexport default Header;\r\n\r\n","import React,{useState , useEffect} from 'react';\r\nimport AccountBalance from './components/AccountBalance/AccountBalance';\r\nimport CoinList from './components/CoinList/CoinList';\r\nimport Header from './components/Header/Header';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\n\r\nconst AppDiv = styled.div`\r\n  text-align: center;\r\n  background-color: rgb(13, 13, 49);\r\n  color: bisque;\r\n`;\r\nconst COIN_COUNT = 10;\r\n\r\nconst formatPrice = price => parseFloat(Number(price).toFixed(5));\r\n\r\nconst App = () =>{\r\n\r\n  const [showBalance,setShowBalance] = useState(false);\r\n  const [amount , setAmount] = useState(10000);\r\n  const [coinData , setCoinData] = useState([]);\r\n\r\n  const componentDidMount = async() =>{\r\n    const resp = await axios.get('https://api.coinpaprika.com/v1/coins');\r\n    const coinIDs = resp.data.slice(0,COIN_COUNT).map(coin => coin.id);\r\n    const tickerURL = `https://api.coinpaprika.com/v1/tickers/`;\r\n    const promises = coinIDs.map(id => axios.get(tickerURL + id));\r\n    const coinData = await Promise.all(promises);\r\n    const finalCoinData = coinData.map(response => {\r\n      const coin = response.data;\r\n      return {\r\n        key : coin.id,\r\n        name : coin.name,\r\n        ticker : coin.symbol,\r\n        price : formatPrice(coin.quotes.USD.price),\r\n        balance : 0\r\n      };\r\n    });\r\n    setCoinData(finalCoinData);\r\n  }\r\n\r\n  useEffect(async function(){\r\n    if(coinData.length === 0){\r\n      componentDidMount();\r\n      }\r\n  });\r\n\r\n  \r\n\r\n \r\n  const handleRefresh = async(clickedId) => {\r\n     const response = await axios.get(`https://api.coinpaprika.com/v1/tickers/${clickedId}`);\r\n     const newPrice = response.data.quotes.USD.price;\r\n     const newCoinData = coinData.map(function(value){\r\n     var newValue = {...value};\r\n       if(newValue.key === clickedId){\r\n          newValue.price = formatPrice(newPrice);\r\n       }\r\n       return newValue;\r\n\r\n     });\r\n     setCoinData(newCoinData);\r\n  }\r\n\r\n  const handleDisplay = () => {\r\n    setShowBalance(oldValue => !oldValue);\r\n  } \r\n\r\n    return (\r\n      <AppDiv>\r\n        <Header />\r\n        <AccountBalance  \r\n             amount = {amount} \r\n             showBalance={showBalance} \r\n             handleDisplay = {handleDisplay}\r\n        />\r\n        <CoinList \r\n             coinData = {coinData} \r\n             refresh = {handleRefresh} \r\n             showBalance={showBalance}\r\n        />\r\n      </AppDiv>\r\n    );\r\n  \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}