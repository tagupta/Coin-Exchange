{"version":3,"sources":["components/AccountBalance/helicopter.svg","components/AccountBalance/AccountBalance.jsx","components/MarketChart/MarketChart.jsx","components/PriceModal/PriceModal.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/Header/logo.svg","components/Header/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["Section","styled","section","Span","span","AccountBalance","amount","showBalance","handleDisplay","handleBalance","buttonText","content","addBalance","Button","onClick","style","className","src","helicopter","alt","height","cursor","MarketChart","coinId","useState","time","setTime","prices","setPrices","market_caps","setMarket_caps","total_volumes","setTotal_volumes","useEffect","url","axios","get","then","response","datrum","data","timeArray","map","values","clock","x","daytime","Date","toTimeString","split","formatedTimestamp","labels","datasets","label","borderColor","pointRadius","width","options","maintainAspectRatio","PriceModal","props","modal","setModal","toggle","today","getFullYear","getMonth","getDate","color","Modal","isOpen","contentClassName","ModalHeader","ModalBody","id","ModalFooter","TableData","td","Coin","name","ticker","price","balance","refresh","buy","sell","href","target","action","method","event","preventDefault","Th","th","CoinList","coinData","Table","striped","bordered","hover","key","AppHeader","header","H1","h1","App_logo_spin","keyframes","Img","img","Header","logo","AppDiv","div","formatPrice","parseFloat","Number","toFixed","App","setShowBalance","setAmount","setCoinData","visible","setVisible","alertMessage","setAlertMessage","componentDidMount","a","sortedCoins","sort","b","market_cap_rank","slice","finalCoinData","coin","symbol","toUpperCase","current_price","length","handleRefresh","clickedId","newPrice","market_data","usd","newCoinData","value","newValue","Alert","display","oldValue","buyCoinId","coins","computeAmount","sellCoinId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.f8fd57dd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/helicopter.46cdedde.svg\";","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport styled  from 'styled-components';\r\nimport helicopter from './helicopter.svg';\r\nimport {Button} from 'reactstrap';\r\nimport './AccountBalance.css';\r\n\r\nconst Section = styled.section`\r\n    margin: 40px auto 20px auto;\r\n    font-size: 1.3rem;\r\n    color: #03f0fc;\r\n    color : cornsilk;\r\n    padding: 10px;\r\n    border: 1px solid #c3c3c3;\r\n    width: fit-content;\r\n    line-height: 0.75em;\r\n    align-items: center;\r\n    display: flex;\r\n    justify-content: center;\r\n`;\r\n\r\nconst Span = styled.span`\r\n     margin-right: 10px;\r\n`;\r\n\r\n\r\n\r\nconst AccountBalance  = ({amount,showBalance,handleDisplay,handleBalance}) =>{\r\n    const buttonText = showBalance ? 'Hide Balance':'Show Balance';\r\n    let content = \"\",addBalance = \"\";\r\n    if(showBalance){\r\n        content = <Span>Balance : ${amount}</Span>\r\n        addBalance = <Button onClick ={handleBalance} style={{'marginRight': '10px'}}><img className ='imageRotateHorizontal' src={helicopter} alt='Add Balance'/></Button>\r\n    }\r\n    return (\r\n        <Section >\r\n            {content}\r\n            <div>\r\n            {addBalance}\r\n            <Button onClick = {handleDisplay} style={{height: \"49px\",cursor: \"pointer\"}}>{buttonText}</Button>\r\n            </div>\r\n            \r\n        </Section>\r\n    );\r\n}\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired\r\n};\r\n\r\nexport default AccountBalance;\r\n","import axios from 'axios';\r\nimport React, {useEffect, useState} from 'react';\r\nimport  {Line} from 'react-chartjs-2';\r\n\r\nconst url_1 = 'https://api.coingecko.com/api/v3/coins/';\r\nconst url_2 = '/market_chart?vs_currency=usd&days=30&interval=Minutely';\r\n\r\nconst MarketChart  = ({coinId}) =>{\r\n   \r\n    const [time,setTime] = useState([]);\r\n    const [prices,setPrices] = useState([]);\r\n    const [market_caps,setMarket_caps] = useState([]);\r\n    const [total_volumes,setTotal_volumes] = useState([]);\r\n\r\n    \r\n        useEffect(() => {\r\n            const formatedTimestamp = (x)=> {\r\n                const d = new Date(x - 3000);\r\n                // setDate(d.toISOString().split('T')[0]);\r\n                const daytime = d.toTimeString().split(' ')[0];\r\n                return `${daytime}`;\r\n              }\r\n            var url = url_1 + coinId + url_2;\r\n            axios.get(url)\r\n               .then(response =>{\r\n                 var datrum = response.data;\r\n                 var timeArray = datrum.prices.map(values => values[0]);\r\n                \r\n                 setTime(timeArray.map(clock => formatedTimestamp(clock)));\r\n                 \r\n                 setPrices(datrum.prices.map(values => values[1]));\r\n                 setMarket_caps(datrum.market_caps.map(values => values[1]));\r\n                 setTotal_volumes(datrum.total_volumes.map(values => values[1]));\r\n\r\n               });\r\n               \r\n        },[]);\r\n     \r\n   \r\n        return (\r\n            <div>\r\n               <Line\r\n               data = {{\r\n                   labels: time,\r\n                   datasets:[\r\n                       {\r\n                           label:'Price',\r\n                           data: prices,\r\n                           borderColor  : '#05f3f7',\r\n                            pointRadius: 0,\r\n                       },\r\n                       {\r\n                           label : 'Market Capital',\r\n                           data : market_caps,\r\n                           borderColor  : '#f70556',\r\n                           pointRadius: 0,\r\n                       },\r\n                       {\r\n                        label : 'Total Volumes',\r\n                        data : total_volumes,\r\n                        borderColor  : '#a6f705',\r\n                        pointRadius: 0,\r\n                       }\r\n                   ],\r\n               }}\r\n               height = {330}\r\n               width = {566}\r\n               options = {{\r\n                   maintainAspectRatio : false\r\n               }}\r\n               />\r\n            </div>\r\n        )\r\n    \r\n}\r\nexport default MarketChart;\r\n","import React , {useState} from 'react';\r\nimport { Modal, Button ,  ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport MarketChart from '../MarketChart/MarketChart';\r\nimport './PriceModal.css';\r\n\r\n\r\n\r\n\r\nconst PriceModal = (props) =>{\r\n\r\n      const [modal, setModal] = useState(false);\r\n      const toggle = () => setModal(!modal);\r\n      \r\n        var today = new Date();\r\n        today = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n      \r\n        return (\r\n            <div>\r\n                <Button color=\"info\" onClick={toggle}>Price Chart</Button>\r\n                <Modal isOpen={modal} toggle={toggle} contentClassName=\"custom-modal-style\">\r\n                    <ModalHeader toggle={toggle}>Graph for {today}</ModalHeader>\r\n                    <ModalBody>\r\n                      <MarketChart coinId={props.id} />\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                    <Button color=\"secondary\" onClick={toggle}>Close</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        );\r\n}\r\nexport default PriceModal;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport {Button} from 'reactstrap';\r\nimport PriceModal from '../PriceModal/PriceModal';\r\n\r\nconst TableData = styled.td`\r\n    border:2px solid #cccccc;\r\n    width: 25vh;\r\n    color : cornsilk;\r\n`;\r\n\r\nconst Coin = ({id,name,ticker,price,balance,refresh,showBalance,buy,sell}) => {\r\n   \r\n  \r\n   const handleClick = (event) => {\r\n       event.preventDefault();\r\n       refresh(id);\r\n   } \r\n   const handleBuy = (event) =>{\r\n    event.preventDefault();\r\n    buy(id);\r\n   }\r\n   const handleSell = (event) =>{\r\n    event.preventDefault();\r\n    sell(id);\r\n   }\r\n       const url = `https://twitter.com/search?q=${name}`;\r\n\r\n        return (\r\n           \r\n            <tr>\r\n                <TableData><a href={url} target=\"_blank\">{name}</a></TableData>\r\n                <TableData>{ticker}</TableData>\r\n                <TableData>${price}</TableData>\r\n                {showBalance ? <TableData>{balance}</TableData> : null}\r\n                <TableData>\r\n                <form action=\"#\" method=\"POST\">\r\n                    <Button onClick={handleClick}>Refresh</Button>\r\n                </form>\r\n                </TableData>\r\n                {showBalance ? <TableData>\r\n                                  <form action=\"#\" method=\"POST\">\r\n                                        <Button style = {{\"marginRight\": '15px'}} onClick={handleBuy}>Buy</Button>\r\n                                        <Button onClick ={handleSell}>Sell</Button>\r\n                                  </form>\r\n                               </TableData> : null }\r\n                <TableData >\r\n                    <PriceModal id = {id}/>\r\n                </TableData>\r\n            </tr>\r\n        )\r\n    \r\n}\r\n\r\nCoin.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired\r\n};\r\nexport default Coin;","import React from 'react';\r\nimport Coin from '../Coin/Coin';\r\nimport styled from 'styled-components';\r\nimport {Table} from 'reactstrap';\r\n\r\nconst Th = styled.th`\r\nborder: 1px solid blanchedalmond;\r\npadding-block: 15px;\r\ncolor : cornsilk;\r\n`;\r\n\r\nconst CoinList  = ({coinData,refresh,showBalance,buy,sell}) =>{\r\n  \r\n        return (\r\n            <Table striped bordered hover   >\r\n                <thead>\r\n                    <tr>\r\n                    <Th>Ticker</Th>\r\n                    <Th>Name</Th>\r\n                    <Th>Price</Th>\r\n                    {showBalance ? <Th>Balance</Th> : null}\r\n                    <Th>Refresh</Th>\r\n                    {showBalance ? <Th>Actions</Th> : null}\r\n                    <Th>Daily Market cap.</Th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {coinData.map( ({key,name,ticker,price,balance}) => \r\n                    <Coin \r\n                       key = {key} \r\n                       id = {key}\r\n                       name = {name} \r\n                       ticker = {ticker} \r\n                       price = {price} \r\n                       balance = {balance}\r\n                       refresh = {refresh}\r\n                       showBalance = {showBalance}\r\n                       buy = {buy}\r\n                       sell = {sell}\r\n                       \r\n                    />\r\n                    )\r\n                    }\r\n                </tbody>\r\n        </Table>\r\n    )\r\n}\r\nexport default CoinList;\r\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport styled, {keyframes} from 'styled-components';\r\n\r\nconst AppHeader = styled.header`\r\n  background-color: #000000;\r\n  min-height: 25vh;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n    font-size: 36px;\r\n`;\r\n\r\nconst App_logo_spin = keyframes`\r\n    from {\r\n        transform: rotate(0deg);\r\n    }\r\n    to {\r\n        transform: rotate(360deg);\r\n    }\r\n`;\r\n  \r\nconst Img = styled.img`\r\n    height: 20vmin;\r\n    pointer-events: none;\r\n    @media (prefers-reduced-motion: no-preference) {\r\n        animation: ${App_logo_spin} infinite 20s linear;\r\n      \r\n    }\r\n`;\r\n\r\nconst Header = () => {\r\n        return (\r\n            <AppHeader>\r\n                <Img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                <H1>\r\n                   Coin Exchange\r\n                </H1>\r\n            </AppHeader>\r\n        );\r\n}\r\nexport default Header;\r\n\r\n","import React,{useState , useEffect} from 'react';\r\nimport AccountBalance from './components/AccountBalance/AccountBalance';\r\nimport CoinList from './components/CoinList/CoinList';\r\nimport Header from './components/Header/Header';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport { Alert } from 'reactstrap';\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\nconst AppDiv = styled.div`\r\n  text-align: center;\r\n  background-color: rgb(13, 13, 49);\r\n  color: bisque;\r\n`;\r\nconst COIN_COUNT = 10;\r\nconst TargetURL =  'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc';\r\nconst formatPrice = price => parseFloat(Number(price).toFixed(5));\r\n\r\nconst App = () =>{\r\n\r\n  const [showBalance,setShowBalance] = useState(false);\r\n  const [amount , setAmount] = useState(10000);\r\n  const [coinData , setCoinData] = useState([]);\r\n  const [visible, setVisible] = useState(false);\r\n  const [alertMessage,setAlertMessage] = useState('');\r\n  const onDismiss = () => setVisible(false);\r\n  // const [showModal, setShow] = useState(false);\r\n  // const handleClose = () => setShow(false);\r\n  // const handleShow = () => setShow(true);\r\n  \r\n\r\n  const componentDidMount = async() =>{\r\n    const response = await axios.get(TargetURL);\r\n    const sortedCoins = response.data.sort((a,b) => a.market_cap_rank - b.market_cap_rank).slice(0,COIN_COUNT);\r\n    const finalCoinData = sortedCoins.map(coin =>{\r\n      return {\r\n        key : coin.id,\r\n        name : coin.name,\r\n        ticker : (coin.symbol).toUpperCase(),\r\n        price : formatPrice(coin.current_price),\r\n        balance : 0\r\n      };\r\n    });\r\n    setCoinData(finalCoinData);\r\n\r\n  }\r\n\r\n  useEffect(function(){\r\n    if(coinData.length === 0){\r\n      componentDidMount();\r\n      }\r\n  });\r\n\r\n  \r\n\r\n \r\n  const handleRefresh = async(clickedId) => {\r\n     const response = await axios.get(`https://api.coingecko.com/api/v3/coins/${clickedId}`);\r\n     const newPrice = response.data.market_data.current_price.usd;\r\n     const newCoinData = coinData.map(function(value){\r\n     var newValue = {...value};\r\n       if(newValue.key === clickedId){\r\n          newValue.price = formatPrice(newPrice);\r\n       }\r\n       return newValue;\r\n\r\n     });\r\n     setCoinData(newCoinData);\r\n  }\r\n\r\n \r\n \r\n  const handleBuying = (buyCoinId) =>{\r\n    var coins = coinData.map(coin => {\r\n      const newValue = {...coin};\r\n      if(coin.key === buyCoinId){\r\n        setAmount(oldValue =>{\r\n          var computeAmount = oldValue -  newValue.price;\r\n          if(computeAmount <= 0){\r\n            setAlertMessage(`Oops!!! Insufficient Balance for a ${newValue.name}`);\r\n            setVisible(true);\r\n            return oldValue;\r\n          }\r\n          else{\r\n              setVisible(false);\r\n              newValue.balance =newValue.balance + 1;\r\n              return formatPrice(computeAmount);\r\n          }\r\n          \r\n        });\r\n      }\r\n      return newValue;\r\n    });\r\n    setCoinData(coins);\r\n  }\r\n  \r\n  const handleSelling = (sellCoinId) =>{\r\n    const coins = coinData.map(values => {\r\n      const newValue = {...values};\r\n\r\n      if(newValue.key === sellCoinId){\r\n        setAmount(oldValue => {\r\n\r\n         if(values.balance <= 0){\r\n          setAlertMessage(`Oops!!! Insufficient ${newValue.name} for sell.`);\r\n          setVisible(true);\r\n          return oldValue;\r\n         }\r\n         else{\r\n          setVisible(false);\r\n          newValue.balance -= 1;\r\n          return formatPrice(oldValue + newValue.price);\r\n         }\r\n        });\r\n      }\r\n      return newValue;\r\n    });\r\n    setCoinData(coins);\r\n  }\r\n\r\n  const handleBalance = () =>{\r\n    setAmount(oldValue => oldValue + 1200);\r\n  }\r\n\r\n  const handleDisplay = () => {\r\n    setShowBalance(oldValue => !oldValue);\r\n  } \r\n\r\n    return (\r\n      <AppDiv>\r\n        \r\n        <Header />\r\n        <Alert color=\"warning\" isOpen={visible} toggle={onDismiss} style={{width: '500px',display: 'inline-block'}}>\r\n                  {alertMessage}\r\n        </Alert>\r\n        <AccountBalance  \r\n             amount = {amount} \r\n             showBalance={showBalance} \r\n             handleDisplay = {handleDisplay}\r\n             handleBalance = {handleBalance}\r\n        />\r\n        <CoinList \r\n             coinData = {coinData} \r\n             refresh = {handleRefresh} \r\n             showBalance={showBalance}\r\n             buy = {handleBuying}\r\n             sell = {handleSelling}\r\n        />\r\n       \r\n       \r\n      </AppDiv>\r\n      \r\n    );\r\n  \r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}